// Generated by CoffeeScript 1.9.3
var stopMonitoringCard;

stopMonitoringCard = (function() {
  function stopMonitoringCard() {}

  stopMonitoringCard.prototype.stopMonitoredVisit = {};

  stopMonitoringCard.prototype.mustacheStopMonitoredVisit = [];

  stopMonitoringCard.prototype.mustacheOnwards = [];

  stopMonitoringCard.prototype.monitoredVehicleJourney = {};

  stopMonitoringCard.prototype.onwardsCall = [];

  stopMonitoringCard.prototype.stopDiscoveryTemplate = "<div class = \"panel panel-default stop-wrapper\">\n  <div class = \"panel-heading\">\n    <div class = \"stop-name\"></div>\n      <h4>{{stopMonitoredVisit.StopPointName}}</h4>\n  </div>\n  <div class = \"panel-body\">\n    {{#mustacheStopMonitoredVisit}}\n      <div>{{key}} : {{value}}</div>\n    {{/mustacheStopMonitoredVisit}}\n    {{#mustacheOnwards}}\n      <h4>OnWards</h4>\n      {{#onWard}}\n        <div>{{key}} : {{value}}</div>\n      {{/onWard}}\n    {{/mustacheOnwards}}\n\n  </div>\n</div>";

  stopMonitoringCard.prototype.parseSiriResponse = function(node) {
    var child, i, len, ref;
    ref = node.children;
    for (i = 0, len = ref.length; i < len; i++) {
      child = ref[i];
      this.buildResponseJSON(child);
    }
  };

  stopMonitoringCard.prototype.buildResponseJSON = function(node) {
    var child, i, len, ref;
    if (node.nodeName === 'siri:FramedVehicleJourneyRef' || node.nodeName === 'siri:MonitoredVehicleJourney' || node.nodeName === 'siri:MonitoredCall') {
      ref = node.children;
      for (i = 0, len = ref.length; i < len; i++) {
        child = ref[i];
        this.buildResponseJSON(child);
      }
    } else if (node.nodeName === 'siri:OnwardCalls') {
      this.addOnwards(node);
    } else {
      this.stopMonitoredVisit[this.unSiried(node.nodeName)] = node.innerHTML;
    }
  };

  stopMonitoringCard.prototype.addOnwards = function(node) {
    var child, grandChild, i, j, len, len1, onward, ref, ref1;
    this.onwardsCall = [];
    ref = node.children;
    for (i = 0, len = ref.length; i < len; i++) {
      child = ref[i];
      onward = {};
      ref1 = child.children;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        grandChild = ref1[j];
        onward[this.unSiried(grandChild.nodeName)] = grandChild.innerHTML;
      }
      this.onwardsCall.push(onward);
    }
  };

  stopMonitoringCard.prototype.unSiried = function(node) {
    return node.replace('siri:', '');
  };

  stopMonitoringCard.prototype.buildMustacheStopCard = function() {
    var k, ref, v;
    ref = this.stopMonitoredVisit;
    for (k in ref) {
      v = ref[k];
      if (this.stopMonitoredVisit.hasOwnProperty(k)) {
        this.mustacheStopMonitoredVisit.push({
          'key': k,
          'value': v
        });
      }
    }
  };

  stopMonitoringCard.prototype.buildMustacheOnwards = function() {
    var i, k, len, onward, ref, tempOnward, v;
    ref = this.onwardsCall;
    for (i = 0, len = ref.length; i < len; i++) {
      onward = ref[i];
      tempOnward = {
        'onWard': []
      };
      for (k in onward) {
        v = onward[k];
        if (onward.hasOwnProperty(k)) {
          tempOnward.onWard.push({
            'key': k,
            'value': v
          });
        }
      }
      this.mustacheOnwards.push(tempOnward);
    }
  };

  stopMonitoringCard.prototype.buildStop = function() {
    var rendered, template;
    this.mustacheStopMonitoredVisit = [];
    this.mustacheOnwards = [];
    this.buildMustacheStopCard();
    this.buildMustacheOnwards();
    template = this.stopDiscoveryTemplate;
    Mustache.parse(template);
    rendered = Mustache.render(template, this);
    $("#response").append(rendered);
  };

  return stopMonitoringCard;

})();
