// Generated by CoffeeScript 1.9.3
var stopMonitoringRequest;

stopMonitoringRequest = (function() {
  function stopMonitoringRequest() {}

  stopMonitoringRequest.prototype.siriVersionAPI = null;

  stopMonitoringRequest.prototype.stopId = null;

  stopMonitoringRequest.prototype.destId = null;

  stopMonitoringRequest.prototype.operatorId = null;

  stopMonitoringRequest.prototype.start = null;

  stopMonitoringRequest.prototype.preview = null;

  stopMonitoringRequest.prototype.typeVisit = null;

  stopMonitoringRequest.prototype.maxStop = null;

  stopMonitoringRequest.prototype.minStLine = null;

  stopMonitoringRequest.prototype.onWard = null;

  stopMonitoringRequest.prototype.lineId = null;

  stopMonitoringRequest.prototype.requestorVersion = null;

  stopMonitoringRequest.prototype.requestorName = null;

  stopMonitoringRequest.prototype.minimumStopVisitPerLineVia = null;

  stopMonitoringRequest.prototype.groupOfLinesRef = null;

  stopMonitoringRequest.prototype.destinationRef = null;

  stopMonitoringRequest.prototype.requestTemplate = "<S:Envelope xmlns:S=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\">\n<SOAP-ENV:Header/>\n<S:Body>\n  <ns7:GetStopMonitoring xmlns:ns2=\"http://www.siri.org.uk/siri\" xmlns:ns3=\"http://www.ifopt.org.uk/acsb\" xmlns:ns4=\"http://www.ifopt.org.uk/ifopt\" xmlns:ns5=\"http://datex2.eu/schema/2_0RC1/2_0\" xmlns:ns6=\"http://scma/siri\" xmlns:ns7=\"http://wsdl.siri.org.uk\">\n    <ServiceRequestInfo>\n      <ns2:RequestTimestamp>{{requestDate}}</ns2:RequestTimestamp>\n      <ns2:RequestorRef>GVB:DRIS</ns2:RequestorRef>\n      <ns2:MessageIdentifier>StopMonitoring:Test:0</ns2:MessageIdentifier>\n    </ServiceRequestInfo>\n    <Request version=\"{{siriVersion}}\">\n      <ns2:RequestTimestamp>{{requestDate}}</ns2:RequestTimestamp>\n      <ns2:MessageIdentifier>StopMonitoring:Test:0</ns2:MessageIdentifier>\n		    {{#preview}}\n      <ns2:PreviewInterval>{{preview}}</ns2:PreviewInterval>\n      {{/preview}}\n      <ns2:StartTime>{{startDate}}</ns2:StartTime>\n		    {{#stopId}}\n      <ns2:MonitoringRef>{{stopId}}</ns2:MonitoringRef>\n      {{/stopId}}\n      {{#lineId}}\n      <ns2:LineRef>{{lineId}}</ns2:LineRef>\n      {{/lineId}}\n				{{#destinationRef}}\n				<ns2:DestinationRef>{{destinationRef}}</ns2:DestinationRef>\n				{{/destinationRef}}\n				{{#typeVisit}}\n				<ns2:StopVisitTypes>{{typeVisit}}</ns2:StopVisitTypes>\n				{{/typeVisit}}\n				{{#maxStop}}\n				<ns2:MaximumStopVisits>{{maxStop}}</ns2:MaximumStopVisits>\n				{{/maxStop}}\n      {{#minStLine}}\n      <ns2:MinimumStopVisitsPerLine>{{minStLine}}</ns2:MinimumStopVisitsPerLine>\n      {{/minStLine}}\n				{{#minimumStopVisitPerLineVia}}\n				<ns2:MinimumStopVisitsPerLineVia>{{minimumStopVisitPerLineVia}}</ns2:MinimumStopVisitsPerLineVia>\n		    {{/minimumStopVisitPerLineVia}}\n      {{#onward}}\n        <ns2:MaximumNumberOfCalls>\n      		<ns2:Onwards>{{onward}}</ns2:Onwards>\n        </ns2:MaximumNumberOfCalls>\n    	{{/onward}}\n    </Request>\n    <RequestExtension/>\n  </ns7:GetStopMonitoring>\n</S:Body>\n</S:Envelope>";

  stopMonitoringRequest.prototype.stopDiscoveryTemplate = "<S:Envelope xmlns:S=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <SOAP-ENV:Header/>\n  <S:Body>\n    <ns7:StopPointsDiscovery xmlns:ns2=\"http://www.siri.org.uk/siri\" xmlns:ns3=\"http://www.ifopt.org.uk/acsb\" xmlns:ns4=\"http://www.ifopt.org.uk/ifopt\" xmlns:ns5=\"http://datex2.eu/schema/2_0RC1/2_0\" xmlns:ns6=\"http://scma/siri\" xmlns:ns7=\"http://wsdl.siri.org.uk\">\n      <Request version=\"1.3\">\n        <ns2:RequestTimestamp>{{requestDate}}</ns2:RequestTimestamp>\n        <ns2:RequestorRef>GVB:DRIS</ns2:RequestorRef>\n        <ns2:MessageIdentifier>Discovery:Test:0</ns2:MessageIdentifier>\n      </Request>\n      <RequestExtension/>\n    </ns7:StopPointsDiscovery>\n</S:Body>\n</S:Envelope>";

  stopMonitoringRequest.prototype.lineDiscoveryTemplate = "<S:Envelope xmlns:S=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <SOAP-ENV:Header/>\n  <S:Body>\n    <ns7:LinesDiscovery xmlns:ns2=\"http://www.siri.org.uk/siri\"  xmlns:ns7=\"http://wsdl.siri.org.uk\">\n      <Request version=\"1.3\">\n        <ns2:RequestTimestamp>{{requestDate}}</ns2:RequestTimestamp>\n        <ns2:RequestorRef>Siri-client</ns2:RequestorRef>\n        <ns2:MessageIdentifier>Discovery:Test:2</ns2:MessageIdentifier>\n      </Request>\n      <RequestExtension/>\n    </ns7:LinesDiscovery>\n  </S:Body>\n</S:Envelope>";

  stopMonitoringRequest.prototype.generalMessageTemplate = "<S:Envelope xmlns:S=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <SOAP-ENV:Header/>\n  <S:Body>\n    <ns7:GetGeneralMessage xmlns:ns2=\"http://www.siri.org.uk/siri\" xmlns:ns3=\"http://www.ifopt.org.uk/acsb\" xmlns:ns4=\"http://www.ifopt.org.uk/ifopt\" xmlns:ns5=\"http://datex2.eu/schema/2_0RC1/2_0\" xmlns:ns6=\"http://scma/siri\" xmlns:ns7=\"http://wsdl.siri.org.uk\">\n      <ServiceRequestInfo>\n        <ns2:RequestTimestamp>{{requestDate}}</ns2:RequestTimestamp>\n        <ns2:RequestorRef>Siri-client</ns2:RequestorRef>\n        <ns2:MessageIdentifier>GeneralMessage:Test:0</ns2:MessageIdentifier>\n      </ServiceRequestInfo>\n      <Request version=\"{{siriVersion}}\">\n        <ns2:RequestTimestamp>{{requestDate}}</ns2:RequestTimestamp>\n        <ns2:MessageIdentifier>GeneralMessage:Test:0</ns2:MessageIdentifier>\n        {{#destinationRef}}\n        <ns2:DestinationRef>{{destinationRef}}</ns2:DestinationRef>\n        {{/destinationRef}}\n        {{#groupOfLinesRef}}\n        <ns2:GroupOfLinesRef>{{groupOfLinesRef}}</ns2:GroupOfLinesRef>\n        {{/groupOfLinesRef}}\n      </Request>\n      <RequestExtension xmlns=\"\"/>\n    </ns7:GetGeneralMessage>\n  </S:Body>\n</S:Envelope>";

  stopMonitoringRequest.prototype.errorResponse = "<div class=\"alert alert-danger\" role=\"alert\">{{errorText}}</div>";

  stopMonitoringRequest.prototype.requestDate = function() {
    var offset, requestDate;
    requestDate = new Date;
    offset = requestDate.getHours() - requestDate.getTimezoneOffset() / 60;
    requestDate.setHours(offset.toString());
    requestDate = requestDate.toISOString();
    return requestDate;
  };

  stopMonitoringRequest.prototype.startDate = function() {
    var hours, minutes, offset, ref, requestDate;
    if (this.start) {
      requestDate = new Date;
      ref = this.start.split(':'), hours = ref[0], minutes = ref[1];
      offset = +hours - requestDate.getTimezoneOffset() / 60;
      requestDate.setHours(offset.toString());
      requestDate.setMinutes(minutes);
      requestDate = requestDate.toISOString();
    } else {
      requestDate = this.requestDate();
    }
    return requestDate;
  };

  stopMonitoringRequest.prototype.parseForm = function(el) {
    var form, i, input, key, len, parseVariables, results;
    parseVariables = ["stopId", "lineId", "destId", "operatorId", "start", "preview", "typeVisit", "maxStop", "minStLine", "onward", "requestorVersion", "requestorName", "destinationRef", "groupOfLinesRef"];
    form = $(el);
    this.siriVersionAPI = form.find('input[name="siriVersionAPIOptions"]:checked').val();
    results = [];
    for (i = 0, len = parseVariables.length; i < len; i++) {
      key = parseVariables[i];
      input = form.find('#' + key);
      results.push(this[key] = input.val());
    }
    return results;
  };

  stopMonitoringRequest.prototype.setStart = function() {
    var startHValue, startMValue;
    startHValue = parseInt(+this.preview / 60);
    startMValue = parseInt(+this.preview % 60);
    if (startHValue > 0 && startMValue > 0) {
      this.preview = "PT" + startHValue + "H" + startMValue + "M";
    } else if (startHValue > 0) {
      this.preview = "PT" + startHValue + "H";
    } else {
      this.preview = "PT" + startMValue + "M";
    }
  };

  stopMonitoringRequest.prototype.siriVersion = function() {
    var siriVersion;
    if (this.requestorVersion && this.requestorName && this.siriVersionAPI === "2.0") {
      siriVersion = this.siriVersionAPI + ":" + this.requestorName + "-" + this.requestorVersion;
    } else {
      siriVersion = this.siriVersionAPI;
    }
    return siriVersion;
  };

  stopMonitoringRequest.prototype.getStopMonitoring = function(form) {
    var template;
    this.parseForm(form);
    if (this.preview) {
      this.setStart();
    }
    this;
    template = this.requestTemplate;
    Mustache.parse(template);
    return Mustache.render(template, this);
  };

  stopMonitoringRequest.prototype.getStopDiscovery = function() {
    var template;
    template = this.stopDiscoveryTemplate;
    Mustache.parse(template);
    return Mustache.render(template, this);
  };

  stopMonitoringRequest.prototype.getLineDiscovery = function() {
    var template;
    template = this.lineDiscoveryTemplate;
    Mustache.parse(template);
    return Mustache.render(template, this);
  };

  stopMonitoringRequest.prototype.getGeneralMessage = function(form) {
    var template;
    this.parseForm(form);
    template = this.generalMessageTemplate;
    Mustache.parse(template);
    return Mustache.render(template, this);
  };

  stopMonitoringRequest.prototype.handleStopMonitoringResponse = function(xmlResponse, handler) {
    var i, len, node, nodes, siriVersionToDisplay;
    siriVersionToDisplay = xmlResponse.find('StopMonitoringDelivery')[0].getAttribute('version');
    nodes = xmlResponse.find('MonitoredStopVisit');
    for (i = 0, len = nodes.length; i < len; i++) {
      node = nodes[i];
      handler.parseSiriResponse(node);
      handler.buildStopMonitoring();
      handler.buildFancyStopMonitoring();
    }
    stopMonitoringRequest.prototype.renderXML(xmlResponse[0]);
    stopMonitoringRequest.prototype.renderNodesLength(nodes.length);
    return stopMonitoringRequest.prototype.renderSiriVersion(siriVersionToDisplay);
  };

  stopMonitoringRequest.prototype.handleStopDiscoveryResponse = function(xmlResponse, handler) {
    var nodes;
    nodes = xmlResponse.find('AnnotatedStopPointRef');
    return handler.buildAutocompleteArray(nodes, "Stop");
  };

  stopMonitoringRequest.prototype.handleLineDiscoveryResponse = function(xmlResponse, handler) {
    var nodes;
    nodes = xmlResponse.find('AnnotatedLineRef');
    return handler.buildAutocompleteArray(nodes, "Line");
  };

  stopMonitoringRequest.prototype.handleStopDiscoveryResponseDisplay = function(xmlResponse, handler) {
    var i, len, node, nodes;
    nodes = xmlResponse.find('AnnotatedStopPointRef');
    for (i = 0, len = nodes.length; i < len; i++) {
      node = nodes[i];
      handler.buildStopDiscoveryJSON(node);
      handler.buildStopDiscovery();
    }
    return stopMonitoringRequest.prototype.renderXML(xmlResponse[0]);
  };

  stopMonitoringRequest.prototype.handleLineDiscoveryResponseDisplay = function(xmlResponse, handler) {
    var i, len, node, nodes;
    nodes = xmlResponse.find('AnnotatedLineRef');
    for (i = 0, len = nodes.length; i < len; i++) {
      node = nodes[i];
      handler.buildLineDiscoveryJSON(node);
      handler.buildLineDiscovery(nodes, "Line");
    }
    return stopMonitoringRequest.prototype.renderXML(xmlResponse[0]);
  };

  stopMonitoringRequest.prototype.handleGeneralMessageResponse = function(xmlResponse, handler) {
    var errorSpan, i, len, node, nodes;
    nodes = xmlResponse.find('GeneralMessage');
    if (nodes.length > 0) {
      for (i = 0, len = nodes.length; i < len; i++) {
        node = nodes[i];
        handler.generalMessage = {};
        handler.buildGeneralMessageJSON(node);
        handler.buildGeneralMessage();
      }
      return stopMonitoringRequest.prototype.renderXML(xmlResponse[0]);
    } else {
      errorSpan = "<div class='alert alert-success' role='alert'><a href='#'' class='close' data-dismiss='alert' aria-label='close'>&times;</a>" + "Tout va bien" + "</div>";
      return $('.alert-wrapper').append(errorSpan);
    }
  };

  stopMonitoringRequest.prototype.renderXML = function(response) {
    var xmlText;
    xmlText = new XMLSerializer().serializeToString(response);
    return $('#xml-response-wrapper').val(xmlText);
  };

  stopMonitoringRequest.prototype.renderNodesLength = function(l) {
    var el, i, len, ref;
    ref = $('.response-counter');
    for (i = 0, len = ref.length; i < len; i++) {
      el = ref[i];
      $(el).text("Nombre d'arrêts: " + l);
    }
  };

  stopMonitoringRequest.prototype.renderSiriVersion = function(l) {
    var el, i, len, ref;
    ref = $('.siri-version-display');
    for (i = 0, len = ref.length; i < len; i++) {
      el = ref[i];
      $(el).text("Version Siri: " + l);
    }
  };

  stopMonitoringRequest.prototype.sendRequest = function(xmlRequest, responseHandler, handler) {
    var serverUrl;
    if (this.siriVersionAPI === "2.0") {
      serverUrl = "urlSiriV2";
    } else {
      serverUrl = 'http://appli.chouette.mobi/irys_server';
    }
    $.ajax({
      method: 'POST',
      url: serverUrl,
      context: document.body,
      crossDomain: true,
      contentType: 'text/xml',
      dataType: 'xml',
      headers: {
        'version': '1.0',
        'encoding': 'UTF-8',
        'standalone': 'no'
      },
      data: xmlRequest
    }).done(function(response) {
      var errorSpan, errorText, isError, xmlDoc;
      xmlDoc = $(response);
      isError = xmlDoc.find('ErrorText');
      if (isError.length > 0) {
        errorText = isError[0].innerHTML;
        errorSpan = "<div class='alert alert-danger' role='alert'><a href='#'' class='close' data-dismiss='alert' aria-label='close'>&times;</a>" + errorText + "</div>";
        $('.alert-wrapper').append(errorSpan);
      } else {
        responseHandler(xmlDoc, handler);
        $('#stop-monitoring-form-wrapper').toggle();
        $('#response-panel-wrapper').toggle();
        $('#response-panel-wrapper').addClass('i-m-there');
      }
    }).fail(function() {
      return alert('epic fail');
    });
  };

  return stopMonitoringRequest;

})();
